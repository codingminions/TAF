rebalance_new.swaprebalancetests.SwapRebalanceBasicTests:

    #do_test,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #do_test,nodes_init=4,replicas=1,standard_buckets=9,num-swap=2,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,num_items=50000,transaction_timeout=1000,GROUP=P0;

    ## Swap orchestrator
     #cbqe-2942 do_test,nodes_init=4,replicas=1,standard_buckets=2,num-swap=2,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P1;
     #cbqe-2942 do_test,nodes_init=4,replicas=1,standard_buckets=7,num-swap=2,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P1;
     #cbqe-2942 do_test,nodes_init=4,replicas=1,standard_buckets=10,num-swap=1,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #do_test,replicas=2,standard_buckets=4,num-swap=1,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P0;

    ## Replica update cases
    ## num_swap=1, replicas=1 and varying number of buckets
    #do_test,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,new_replica=1,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #do_test,nodes_init=4,replicas=1,standard_buckets=9,num-swap=2,new_replica=2,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #do_test,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=3,num_items=50000,transaction_timeout=1000,GROUP=P0;

    ## Swap orchestrator
     #CBQE-2942 do_test,nodes_init=4,replicas=1,standard_buckets=2,num-swap=2,swap-orchestrator=True,new_replica=2,num_items=50000,transaction_timeout=1000,GROUP=P1;
     #CBQE-2942 do_test,nodes_init=4,replicas=1,standard_buckets=7,num-swap=2,swap-orchestrator=True,new_replica=3,num_items=50000,transaction_timeout=1000,GROUP=P1;
     #CBQE-2942 do_test,nodes_init=4,replicas=1,standard_buckets=10,num-swap=1,swap-orchestrator=True,new_replica=2,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #do_test,replicas=2,standard_buckets=4,num-swap=1,swap-orchestrator=True,new_replica=1,num_items=50000,transaction_timeout=1000,GROUP=P0;

    
#rebalance_new.swaprebalancetests.SwapRebalanceFailedTests:

    #test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,percentage_progress=40,num_items=50000,transaction_timeout=1000,GROUP=P0;
    #test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,percentage_progress=60,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=2,swap-orchestrator=True,percentage_progress=30,num_items=50000,transaction_timeout=1000,GROUP=P0;
    #test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,percentage_progress=80,num_items=50000,transaction_timeout=1000,GROUP=P1;

    ## Add back some node after failing it over
    #test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,num_items=50000,transaction_timeout=1000,GROUP=P0;
    #test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=3,num-swap=2,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P0;
    #test_add_back_failed_node,nodes_init=4,replicas=3,standard_buckets=5,num-swap=2,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P1;

    ## Swap rebalance with failed nodes
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,num_items=50000,transaction_timeout=1000,GROUP=P0;
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=1,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P1;
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,swap-orchestrator=True,num_items=50000,transaction_timeout=1000,GROUP=P1;

    ## Replica update cases
    #test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,percentage_progress=40,GROUP=P0;
    #test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=3,num-swap=1,new_replica=1,percentage_progress=60,GROUP=P1;
    #test_failed_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=2,new_replica=3,swap-orchestrator=True,percentage_progress=30,GROUP=P0;
    #test_failed_swap_rebalance,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,new_replica=1,swap-orchestrator=True,percentage_progress=80,GROUP=P1;

    ## Add back some node after failing it over
    #test_add_back_failed_node,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,GROUP=P0;
    #test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=3,num-swap=2,new_replica=1,GROUP=P1;
    #test_add_back_failed_node,nodes_init=4,replicas=2,standard_buckets=2,num-swap=2,new_replica=3,swap-orchestrator=True,GROUP=P0;
    #test_add_back_failed_node,nodes_init=4,replicas=3,standard_buckets=5,num-swap=2,new_replica=1,swap-orchestrator=True,GROUP=P1;

    ## Swap rebalance with failed nodes
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,new_replica=2,GROUP=P0;
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=3,num-swap=2,new_replica=3,GROUP=P1;
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=4,num-swap=1,swap-orchestrator=True,new_replica=2,GROUP=P1;
    #test_failover_swap_rebalance,nodes_init=4,replicas=1,standard_buckets=1,num-swap=2,swap-orchestrator=True,new_replica=2,GROUP=P1;

 
#rebalance_new.swaprebalancetests.SwapRebalanceStartStopTests:

    #do_test,replicas=1,nodes_init=2,standard_buckets=1,num-swap=1,GROUP=P0;
    #do_test,replicas=2,nodes_init=3,standard_buckets=2,num-swap=2,GROUP=P0;
    #do_test,replicas=3,nodes_init=4,standard_buckets=1,num-swap=3,GROUP=P0;

    #do_test,replicas=1,nodes_init=2,standard_buckets=1,num-swap=1,new_replica=2,GROUP=P0;
    #do_test,replicas=2,nodes_init=3,standard_buckets=2,num-swap=2,new_replica=1,GROUP=P0;
    #do_test,replicas=3,nodes_init=4,standard_buckets=1,num-swap=3,new_replica=2,GROUP=P0;

